#!/usr/bin/env bash

DIR="$HOME/.config"
RASI="$DIR/rofi/screenshot.rasi"

# Theme Elements
prompt='Screenshot'
mesg="Directory :: /home/dex/Pictures/Screenshots"
iconsDir="/home/dex/.local/share/icons"

# Options
layout=$(cat ${RASI} | grep 'USE_ICON' | cut -d'=' -f2)
if [[ "$layout" == 'NO' ]]; then
	option_1=" Capture Desktop"
	option_2=" Capture Area"
	option_3=" Capture Active Window"
	option_4=" Capture Selected Window"
else
	option_1=""
	option_2=""
	option_3=""
	option_4="󰳽"
fi

# Rofi CMD
rofi_cmd() {
	rofi -dmenu \
		-dpi 50 \
		-p "$prompt" \
		-mesg "$mesg" \
		-markup-rows \
		-theme ${RASI}
}

# Pass variables to rofi dmenu
run_rofi() {
	echo -e "$option_1\n$option_2\n$option_3\n$option_4" | rofi_cmd
}

# Screenshot
time=$(date +%Y-%m-%d-%H-%M-%S)
dir="/home/dex/Pictures/Screenshots"
file="Screenshot_${time}.png"
notify_cmd_shot='notify-send -u low -h string:x-dunst-stack-tag:obscreenshot'

# Directory
if [[ ! -d "$dir" ]]; then
	mkdir -p "$dir"
fi

# notify and view screenshot
notify_view() {
	notify_cmd_shot='notify-send -u low -h string:x-dunst-stack-tag:obscreenshot'
	${notify_cmd_shot} -i $iconsDir/Qogir-dark/symbolic/status/clipboard-text-outline-symbolic.svg "Screenshot taken and copied to clipboard."
	paplay /usr/share/sounds/freedesktop/stereo/screen-capture.oga &>/dev/null &
	swayimg -s fit ${dir}/"$file"
	if [[ -e "$dir/$file" ]]; then
		${notify_cmd_shot} -i $iconsDir/Qogir-dark/symbolic/categories/xapp-prefs-preview-symbolic.svg "Screenshot Saved."
	else
		${notify_cmd_shot} -i $iconsDir/Qogir-dark/symbolic/actions/app-remove-symbolic.svg "Screenshot Deleted."
	fi
}

# Copy screenshot to clipboard
copy_shot() {
	tee "$file" | wl-copy --type image/png
}

# take shots
shotnow() {
	cd ${dir} && wayshot --stdout | copy_shot
	notify_view
}

shotwin_active() {
    if [ $DESKTOP_SESSION == "sway" ]; then
        FOCUSED=$(swaymsg -t get_tree | jq -r 'recurse(.nodes[]?, .floating_nodes[]?) | select(.focused)')
        AREA=$(echo "$FOCUSED" | jq -r '.rect | "\(.x),\(.y) \(.width)x\(.height)"')
    elif [ $DESKTOP_SESSION == "hyprland" ]; then
        FOCUSED=$(hyprctl -j activewindow | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"')
        AREA=$FOCUSED
    fi
    if [ ! -z "$FOCUSED" ]; then
		cd ${dir} && wayshot -s "$AREA" --stdout | copy_shot
		notify_view
	fi
}

shotwin_selected() {
    if [ $DESKTOP_SESSION == "sway" ]; then
        AREA=$(swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp -d -b "#1f1f28aa" -c "#c8c093aa" -F "IosevkaTerm Nerd Font")
    elif [ $DESKTOP_SESSION == "hyprland" ]; then
        echo "pass"
        WS_NAME=$(hyprctl -j activeworkspace | jq -r '.id')
        AREA=$(hyprctl -j clients | jq --arg ws_name "$WS_NAME" -r '.[] | select(.workspace.name == $ws_name) | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' | slurp -d -b "#ffffff20" -c "#cba6f7" -F "IosevkaTerm Nerd Font")
    fi
    if [ ! -z "$AREA" ]; then
		cd ${dir} && wayshot -s "$AREA" --stdout | copy_shot
		notify_view
	fi
}

shotarea() {
	AREA=$(slurp -d -b "#1f1f28aa" -c "#c8c093aa" -F "IosevkaTerm Nerd Font")
	if [ ! -z "$AREA" ]; then
		cd ${dir} && wayshot -s "$AREA" --stdout | copy_shot
		notify_view
	fi
}

# Execute Command
run_cmd() {
	sleep 0.25
	if [[ "$1" == '--opt1' ]]; then
		shotnow
	elif [[ "$1" == '--opt2' ]]; then
		shotarea
	elif [[ "$1" == '--opt3' ]]; then
		shotwin_active
	elif [[ "$1" == '--opt4' ]]; then
		shotwin_selected
	fi
}

# Actions
chosen="$(run_rofi)"
case ${chosen} in
$option_1)
	run_cmd --opt1
	;;
$option_2)
	run_cmd --opt2
	;;
$option_3)
	run_cmd --opt3
	;;
$option_4)
	run_cmd --opt4
	;;
esac
